using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment7
{
    public class CustomerManager
    {
        //FIELDS        
        private List<Customer> customerList;  //declare object of the collection      
        private int customerNumber; //autogenerated customer number

        /// <summary>
        /// Default contsructor. It creates a new arrylist object.
        /// it assigns default value of 3 for starters.
        /// </summary>
        public CustomerManager()
        {
            customerList = new List<Customer>();
            customerNumber = 3;
            TestValues();
        }
        /// <summary>
        /// Returns the customer object at the selected index of the customers arrylist
        /// </summary>
        /// <param name="index">selectedindex by the user</param>
        /// <returns>customer objects</returns>
        public Customer GetCustomer(int index)
        {
            return (Customer) customerList[index];
        }
        /// <summary>
        /// It counts the number of customers objects that are persent in the arrylist.
        /// </summary>
        /// <returns>no. of customers</returns>
        public int Count
        {
            get { return customerList.Count; }
        }
        /// <summary>
        /// It creates a new customer id for every customer present in the arrylist.
        /// </summary>
        /// <returns>new id for th new customer</returns>
        public int GetNewCustomerNumber
        {
            get { return customerNumber++; }
        }
        /// <summary>
        /// Its stores the new customer details entered by the user, and returns true if added.
        /// </summary>
        /// <param name="customerIn">Input details</param>
        /// <returns>true when the new customer is added</returns>
        public bool AddCustomer(Customer customerIn)
        {
            if (customerIn == null)
                return false;
            customerIn.CustomerNumber = GetNewCustomerNumber.ToString();
            customerList.Add(customerIn);
            return true;

        }
        /// <summary>
        /// validates the index of the arrylist
        /// </summary>
        /// <param name="index">selected index</param>
        /// <returns>true if index is less than the arrysize</returns>
        public bool CheckIndex(int index)
        {
            if ((index >= 0) && (index < customerList.Count))
                return true;
            else
                return false;
        }
        /// <summary>
        /// If index is valid then it will delete that customer from the arraylist.
        /// </summary>
        /// <param name="index">index at which customer need to be deleted</param>
        /// <returns></returns>
        public bool DeleteCustomerAt(int index)
        {
            if (CheckIndex(index))
                customerList.RemoveAt(index);
            else
                return false;
            return true;
        }
        /// <summary>
        /// If index is valid then it will remove that customer from the arraylist.
        /// </summary>
        /// <param name="index">index at which customer need to be deleted</param>
        /// <returns></returns>
        public bool RemoveCustomer(int index)
        {
            if (CheckIndex(index))
            {
                customerList.RemoveAt(index);
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// If the index is valid then it will allow the updates of the fields.
        /// </summary>
        /// <param name="contactIn">details selected customer</param>
        /// <param name="index">selectedindex</param>
        /// <returns>true if value is changed</returns>
        public bool ChangeCustomer(Contact contactIn, int index)
        {
            if ((contactIn != null) && CheckIndex(index))
            {
                Customer customer = (Customer)customerList[index];
                customer.ContactData = contactIn;
                customerList.RemoveAt(index);
                customerList.Insert(index, customer);
                return true;
            }
            else
            {
                return false;
            }  
        }
        /// <summary>
        /// This method prepares an array of strings containing
        /// information about the customers in customersList
        /// </summary>
        /// <returns>array of strings</returns>
        public string[] GetInfoStringsList()
        {
            //create a local array of the string element with a capacity = num
            //elements in the customerlist
            string[] infoStrings = new string[customerList.Count];
            for (int i = 0; i < infoStrings.Length; i++)
            {
                infoStrings[i] = customerList[i].ToString();
            }
            return infoStrings;
        }
        /// <summary>
        /// passing test values to check it.
        /// </summary>
        public void TestValues()
        {
            Address adr = new Address("Infanterivägen 17", "291 35", "Kristianstad", Countries.Sverige);
            Phone phone = new Phone("+4644179702", "+4676017012");
            Email email = new Email("gloria.palm7810@gmail.com", "gloriasoliano@yahoo.com");
            Contact contact = new Contact("Passport", "95008650", "Gloria Palm", "40", GenderType.Female, adr, phone, email);
            Customer customer = new Customer(contact);
            customerList.Add(customer);
            customer.CustomerNumber = 1.ToString();
            Address adr1 = new Address("Näsbychaussen 60A", "291 36", "Kristianstad", Countries.Sverige);
            Phone phone1 = new Phone("+4644145890", "+4676803456");
            Email email1 = new Email("gabrielsvensson@hotmail.com", "svenssongabriel@yahoo.com");
            Contact contact1 = new Contact("National ID", "7426580", "Gabriel Svensson", "45", GenderType.Male, adr1, phone1, email1);
            Customer customer1 = new Customer(contact1);
            customerList.Add(customer1);
            customer1.CustomerNumber = 2.ToString();
        }
        /// <summary>
        /// FileManager is a class that handles the saving and reading data
        /// to and from a text file. Send the customerlist from which data is read and saved
        /// to the file fileName.
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public bool WriteDataToFile(string fileName)
        {
            FileManager fileManager = new FileManager();
            return fileManager.SaveCustomerToFile(customerList, fileName);
        }
        /// <summary>
        /// Send the customerlist object declared in above to which data from the filename is saved.
        /// As customerlist is an object it will have the changes made in the FileManager when the
        /// method ReadCustomerListFrFile returns.
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public bool ReadDataFromFile(string fileName)
        {
            FileManager fileManager = new FileManager();
            return fileManager.ReadCustomerFrFile(customerList, fileName);
        }
    }
}
