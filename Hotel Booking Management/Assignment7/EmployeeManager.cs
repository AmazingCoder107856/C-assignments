using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment7
{
    public class EmployeeManager
    {
        //FIELDS        
        private List<Employee> employeeList;  //declare object of the collection      
        private int employeeNumber; //autogenerated customer number

        /// <summary>
        /// Default contsructor. It creates a new arrylist object.
        /// it assigns default value of 3 for starters.
        /// </summary>
        public EmployeeManager()
        {
            employeeList = new List<Employee>();
            employeeNumber = 1003;
            TestValues();
        }
        /// <summary>
        /// Returns the customer object at the selected index of the employees arrylist
        /// </summary>
        /// <param name="index">selectedindex by the user</param>
        /// <returns>employee objects</returns>
        public Employee GetEmployee(int index)
        {
            return (Employee)employeeList[index];
        }
        /// <summary>
        /// It counts the number of employees objects that are persent in the arrylist.
        /// </summary>
        /// <returns>no. of employees</returns>
        public int Count
        {
            get { return employeeList.Count; }
        }
        /// <summary>
        /// It creates a new employee id for every employee present in the arrylist.
        /// </summary>
        /// <returns>new id for th new employee</returns>
        public int GetNewEmployeeNumber
        {
            get { return employeeNumber++; }
        }
        /// <summary>
        /// Its stores the new employee details entered by the user, and returns true if added.
        /// </summary>
        /// <param name="employeeIn">Input details</param>
        /// <returns>true when the new employee is added</returns>
        public bool AddEmployee(Employee employeeIn)
        {
            if (employeeIn == null)
                return false;
            employeeIn.EmployeeNumber = GetNewEmployeeNumber.ToString();
            employeeList.Add(employeeIn);
            return true;

        }
        /// <summary>
        /// validates the index of the arrylist
        /// </summary>
        /// <param name="index">selected index</param>
        /// <returns>true if index is less than the arrysize</returns>
        public bool CheckIndex(int index)
        {
            if ((index >= 0) && (index < employeeList.Count))
                return true;
            else
                return false;
        }
        /// <summary>
        /// If index is valid then it will delete that employee from the arraylist.
        /// </summary>
        /// <param name="index">index at which employee need to be deleted</param>
        /// <returns></returns>
        public bool DeleteEmployeeAt(int index)
        {
            if (CheckIndex(index))
                employeeList.RemoveAt(index);
            else
                return false;
            return true;
        }
        /// <summary>
        /// If index is valid then it will remove that employee from the arraylist.
        /// </summary>
        /// <param name="index">index at which employee need to be deleted</param>
        /// <returns></returns>
        public bool RemoveEmployee(int index)
        {
            if (CheckIndex(index))
            {
                employeeList.RemoveAt(index);
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// If the index is valid then it will allow the updates of the fields.
        /// </summary>
        /// <param name="contactIn">details selected employee</param>
        /// <param name="index">selectedindex</param>
        /// <returns>true if value is changed</returns>
        public bool ChangeEmployee(EmployeeContacts contactIn, int index)
        {
            if ((contactIn != null) && CheckIndex(index))
            {
                Employee employee = (Employee)employeeList[index];
                employee.EmployeeContactData = contactIn;
                employeeList.RemoveAt(index);
                employeeList.Insert(index, employee);
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// This method prepares an array of strings containing
        /// information about the employees in employeeList
        /// </summary>
        /// <returns>array of strings</returns>
        public string[] GetEmployeeInfoStringsList()
        {
            //create a local array of the string element with a capacity = num
            //elements in the customerlist
            string[] employeeInfoStrings = new string[employeeList.Count];
            for (int i = 0; i < employeeInfoStrings.Length; i++)
            {
                employeeInfoStrings[i] = employeeList[i].ToString();
            }
            return employeeInfoStrings;
        }
        /// <summary>
        /// passing test values to check it.
        /// </summary>
        public void TestValues()
        {
            Address adr = new Address("Korsvägen 8", "291 75", "Kristianstad", Countries.Sverige);
            Phone phone = new Phone("+4644179702");
            Email email = new Email("hilda5689@gmail.com");
            EmployeeContacts employeeContacts = new EmployeeContacts("Hilda", "Nilsson", "56", GenderType.Female, StatusType.Widow, JobType.Housekeeping, "22,000.00", adr, phone, email);
            Employee employee = new Employee(employeeContacts);
            employeeList.Add(employee);
            employee.EmployeeNumber = 1001.ToString();
            Address adr1 = new Address("Chicago 9B", "291 90", "Chicago", Countries.United_States_of_America);
            Phone phone1 = new Phone("+100896745368");
            Email email1 = new Email("joseph689@gmail.com");
            EmployeeContacts employeeContacts1 = new EmployeeContacts("Joseph", "Smith", "45", GenderType.Male, StatusType.Married, JobType.Manager, "50,000.00", adr1, phone1, email1);
            Employee employee1 = new Employee(employeeContacts1);
            employeeList.Add(employee1);
            employee1.EmployeeNumber = 1002.ToString();
        }
        /// <summary>
        /// FileManager is a class that handles the saving and reading data
        /// to and from a text file. Send the employeelist from which data is read and saved
        /// to the file fileEmployeeName.
        /// </summary>
        /// <param name="fileEmployeeName"></param>
        /// <returns></returns>
        public bool WriteEmployeeDataToFile(string fileEmployeeName)
        {
            FileManager fileManager = new FileManager();
            return fileManager.SaveEmployeeToFile(employeeList, fileEmployeeName);
        }
        /// <summary>
        /// Send the employeelist object declared in above to which data from the filename is saved.
        /// As employeelist is an object it will have the changes made in the FileManager when the
        /// method ReadEmployeeListFrFile returns.
        /// </summary>
        /// <param name="fileEmployeeName"></param>
        /// <returns></returns>
        public bool ReadEmployeeDataFromFile(string fileEmployeeName)
        {
            FileManager fileManager = new FileManager();
            return fileManager.ReadEmployeeFrFile(employeeList, fileEmployeeName);
        }
    }
}
