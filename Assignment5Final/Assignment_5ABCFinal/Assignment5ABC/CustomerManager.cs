using Assignment5ABC.ContactFiles;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment5ABC
{
    public class CustomerManager
    {
        //FIELDS        
        private List<Customer> customers;  //declare object of the collection      
        private int m_idCounter; //autogenerated id values

        /// <summary>
        /// Default contsructor. It creates a new arrylist object.
        /// it assigns default value of 101 for starters.
        /// </summary>
        public CustomerManager()
        {
            customers = new List<Customer>();
            m_idCounter = 101;
            TestValues();
        }
        /// <summary>
        /// Returns the customer object at the selected index of the customers arrylist
        /// </summary>
        /// <param name="index">selectedindex by the user</param>
        /// <returns>customer objects</returns>
        public Customer GetCustomerAt(int index)
        {            
            return (Customer) customers[index];
        }  
        /// <summary>
        /// It counts the number of customers objects that are persent in the arrylist.
        /// </summary>
        /// <returns>no. of customers</returns>
        public int Count
        {
            get { return customers.Count; }
        }
        /// <summary>
        /// It creates a new customer id for every customer present in the arrylist.
        /// </summary>
        /// <returns>new id for th new customer</returns>
        public int GetNewID
        {
            get { return m_idCounter++; }
        }
        /// <summary>
        /// Its stores the new customer details entered by the user, and returns true if added.
        /// </summary>
        /// <param name="customerIn">Input details</param>
        /// <returns>true when the new customer is added</returns>
        public bool AddCustomer(Customer customerIn)
        {
            if (customerIn == null)
                return false;
            customerIn.ID = GetNewID.ToString();
            customers.Add(customerIn);           
            return true;
        }           
        /// <summary>
        /// validates the index of the arrylist
        /// </summary>
        /// <param name="index">selected index</param>
        /// <returns>true if index is less than the arrysize</returns>
        public bool CheckIndex(int index)
        {
            if ((index >= 0) && (index < customers.Count))
                return true;
            else
                return false;
        }        
        public bool DeleteCustomerAt(int index)
        {
            if (CheckIndex(index))
                customers.RemoveAt(index);
            else
                return false;
            return true;
        }           
        /// <summary>
        /// If index is valid then it will remove that customer from the arraylist.
        /// </summary>
        /// <param name="index">index at which customer need to be deleted</param>
        /// <returns></returns>
        public bool RemoveCustomer(int index)
        {
            if (CheckIndex(index))
            {
                customers.RemoveAt(index);
                return true;
            }                
            else
            {
                return false;
            }            
        }
        /// <summary>
        /// If the index is valid then it will allow the updates of the fields.
        /// </summary>
        /// <param name="contactIn">details selected customer</param>
        /// <param name="index">selectedindex</param>
        /// <returns>true if value is changed</returns>
        public bool ChangeCustomer(Contact contactIn, int index)
        {
            if (CheckIndex(index))
            {
                Customer customer = (Customer)customers[index];
                customer.ContactData = contactIn;
                customers.RemoveAt(index);
                customers.Insert(index, customer);
                return true;
            }
            else
                return false;
        }        
        /// <summary>
        /// passing test values to check it.
        /// </summary>
        public void TestValues()
        {            
            Address adr = new Address("Infanterivägen 17", "291 35", "Kristianstad", Countries.Sverige);
            Phone phone = new Phone("+46 44 179 702", "+46 76 017012");
            Email email = new Email("gloria.palm7810@gmail.com", "gloriasoliano@yahoo.com");
            Contact contact = new Contact("Gloria", "Palm", adr, phone, email);            
            Customer customer = new Customer(contact);
            customers.Add(customer);
            customer.ID = 100.ToString();
        }        
    }
}
